// Generated by: github.com/Feresey/gen-tgbotapi

package tgapi

import "fmt"

type ErrIncorrectEnum struct {
	Value string
}

func (e ErrIncorrectEnum) Error() string {
	return fmt.Sprintf("incorrect enum value: %s", e.Value)
}

type BotType int

const (
	_ BotType = iota
)

var valueBotType = map[BotType]string{}

var indexBotType = map[string]BotType{}

func (enum BotType) String() string {
	return valueBotType[enum]
}

func (enum BotType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *BotType) UnmarshalText(src []byte) error {
	value, ok := indexBotType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type ChatType int

const (
	_ ChatType = iota
	ChatTypeChannel
	ChatTypeGroup
	ChatTypePrivate
	ChatTypeSupergroup
)

var valueChatType = map[ChatType]string{
	ChatTypeChannel:    "channel",
	ChatTypeGroup:      "group",
	ChatTypePrivate:    "private",
	ChatTypeSupergroup: "supergroup",
}

var indexChatType = map[string]ChatType{
	"channel":    ChatTypeChannel,
	"group":      ChatTypeGroup,
	"private":    ChatTypePrivate,
	"supergroup": ChatTypeSupergroup,
}

func (enum ChatType) String() string {
	return valueChatType[enum]
}

func (enum ChatType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *ChatType) UnmarshalText(src []byte) error {
	value, ok := indexChatType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type EncryptedType int

const (
	_ EncryptedType = iota
	EncryptedTypeAddress
	EncryptedTypeBankStatement
	EncryptedTypeDriverLicense
	EncryptedTypeEmail
	EncryptedTypeIDentityCard
	EncryptedTypeInternalPassport
	EncryptedTypePassport
	EncryptedTypePassportRegistration
	EncryptedTypePersonalDetails
	EncryptedTypePhoneNumber
	EncryptedTypeRentalAgreement
	EncryptedTypeTemporaryRegistration
	EncryptedTypeUtilityBill
)

var valueEncryptedType = map[EncryptedType]string{
	EncryptedTypeAddress:               "address",
	EncryptedTypeBankStatement:         "bank_statement",
	EncryptedTypeDriverLicense:         "driver_license",
	EncryptedTypeEmail:                 "email",
	EncryptedTypeIDentityCard:          "identity_card",
	EncryptedTypeInternalPassport:      "internal_passport",
	EncryptedTypePassport:              "passport",
	EncryptedTypePassportRegistration:  "passport_registration",
	EncryptedTypePersonalDetails:       "personal_details",
	EncryptedTypePhoneNumber:           "phone_number",
	EncryptedTypeRentalAgreement:       "rental_agreement",
	EncryptedTypeTemporaryRegistration: "temporary_registration",
	EncryptedTypeUtilityBill:           "utility_bill",
}

var indexEncryptedType = map[string]EncryptedType{
	"address":                EncryptedTypeAddress,
	"bank_statement":         EncryptedTypeBankStatement,
	"driver_license":         EncryptedTypeDriverLicense,
	"email":                  EncryptedTypeEmail,
	"identity_card":          EncryptedTypeIDentityCard,
	"internal_passport":      EncryptedTypeInternalPassport,
	"passport":               EncryptedTypePassport,
	"passport_registration":  EncryptedTypePassportRegistration,
	"personal_details":       EncryptedTypePersonalDetails,
	"phone_number":           EncryptedTypePhoneNumber,
	"rental_agreement":       EncryptedTypeRentalAgreement,
	"temporary_registration": EncryptedTypeTemporaryRegistration,
	"utility_bill":           EncryptedTypeUtilityBill,
}

func (enum EncryptedType) String() string {
	return valueEncryptedType[enum]
}

func (enum EncryptedType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *EncryptedType) UnmarshalText(src []byte) error {
	value, ok := indexEncryptedType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type EntityType int

const (
	_ EntityType = iota
	EntityTypeBold
	EntityTypeBotCommand
	EntityTypeCashtag
	EntityTypeCode
	EntityTypeCustomEmoji
	EntityTypeEmail
	EntityTypeHashtag
	EntityTypeItalic
	EntityTypeMention
	EntityTypePhoneNumber
	EntityTypePre
	EntityTypeSpoiler
	EntityTypeStrikethrough
	EntityTypeTextLink
	EntityTypeTextMention
	EntityTypeUnderline
	EntityTypeURL
)

var valueEntityType = map[EntityType]string{
	EntityTypeBold:          "bold",
	EntityTypeBotCommand:    "bot_command",
	EntityTypeCashtag:       "cashtag",
	EntityTypeCode:          "code",
	EntityTypeCustomEmoji:   "custom_emoji",
	EntityTypeEmail:         "email",
	EntityTypeHashtag:       "hashtag",
	EntityTypeItalic:        "italic",
	EntityTypeMention:       "mention",
	EntityTypePhoneNumber:   "phone_number",
	EntityTypePre:           "pre",
	EntityTypeSpoiler:       "spoiler",
	EntityTypeStrikethrough: "strikethrough",
	EntityTypeTextLink:      "text_link",
	EntityTypeTextMention:   "text_mention",
	EntityTypeUnderline:     "underline",
	EntityTypeURL:           "url",
}

var indexEntityType = map[string]EntityType{
	"bold":          EntityTypeBold,
	"bot_command":   EntityTypeBotCommand,
	"cashtag":       EntityTypeCashtag,
	"code":          EntityTypeCode,
	"custom_emoji":  EntityTypeCustomEmoji,
	"email":         EntityTypeEmail,
	"hashtag":       EntityTypeHashtag,
	"italic":        EntityTypeItalic,
	"mention":       EntityTypeMention,
	"phone_number":  EntityTypePhoneNumber,
	"pre":           EntityTypePre,
	"spoiler":       EntityTypeSpoiler,
	"strikethrough": EntityTypeStrikethrough,
	"text_link":     EntityTypeTextLink,
	"text_mention":  EntityTypeTextMention,
	"underline":     EntityTypeUnderline,
	"url":           EntityTypeURL,
}

func (enum EntityType) String() string {
	return valueEntityType[enum]
}

func (enum EntityType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *EntityType) UnmarshalText(src []byte) error {
	value, ok := indexEntityType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type InlineType int

const (
	_ InlineType = iota
	InlineTypeArticle
	InlineTypeAudio
	InlineTypeContact
	InlineTypeDocument
	InlineTypeGame
	InlineTypeGif
	InlineTypeLocation
	InlineTypeMpeg4Gif
	InlineTypePhoto
	InlineTypeSticker
	InlineTypeVenue
	InlineTypeVideo
	InlineTypeVoice
)

var valueInlineType = map[InlineType]string{
	InlineTypeArticle:  "article",
	InlineTypeAudio:    "audio",
	InlineTypeContact:  "contact",
	InlineTypeDocument: "document",
	InlineTypeGame:     "game",
	InlineTypeGif:      "gif",
	InlineTypeLocation: "location",
	InlineTypeMpeg4Gif: "mpeg4_gif",
	InlineTypePhoto:    "photo",
	InlineTypeSticker:  "sticker",
	InlineTypeVenue:    "venue",
	InlineTypeVideo:    "video",
	InlineTypeVoice:    "voice",
}

var indexInlineType = map[string]InlineType{
	"article":   InlineTypeArticle,
	"audio":     InlineTypeAudio,
	"contact":   InlineTypeContact,
	"document":  InlineTypeDocument,
	"game":      InlineTypeGame,
	"gif":       InlineTypeGif,
	"location":  InlineTypeLocation,
	"mpeg4_gif": InlineTypeMpeg4Gif,
	"photo":     InlineTypePhoto,
	"sticker":   InlineTypeSticker,
	"venue":     InlineTypeVenue,
	"video":     InlineTypeVideo,
	"voice":     InlineTypeVoice,
}

func (enum InlineType) String() string {
	return valueInlineType[enum]
}

func (enum InlineType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *InlineType) UnmarshalText(src []byte) error {
	value, ok := indexInlineType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type InputType int

const (
	_ InputType = iota
	InputTypeAnimation
	InputTypeAudio
	InputTypeDocument
	InputTypePhoto
	InputTypeVideo
)

var valueInputType = map[InputType]string{
	InputTypeAnimation: "animation",
	InputTypeAudio:     "audio",
	InputTypeDocument:  "document",
	InputTypePhoto:     "photo",
	InputTypeVideo:     "video",
}

var indexInputType = map[string]InputType{
	"animation": InputTypeAnimation,
	"audio":     InputTypeAudio,
	"document":  InputTypeDocument,
	"photo":     InputTypePhoto,
	"video":     InputTypeVideo,
}

func (enum InputType) String() string {
	return valueInputType[enum]
}

func (enum InputType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *InputType) UnmarshalText(src []byte) error {
	value, ok := indexInputType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type KeyboardButtonType int

const (
	_ KeyboardButtonType = iota
	KeyboardButtonTypeQuiz
	KeyboardButtonTypeRegular
)

var valueKeyboardButtonType = map[KeyboardButtonType]string{
	KeyboardButtonTypeQuiz:    "quiz",
	KeyboardButtonTypeRegular: "regular",
}

var indexKeyboardButtonType = map[string]KeyboardButtonType{
	"quiz":    KeyboardButtonTypeQuiz,
	"regular": KeyboardButtonTypeRegular,
}

func (enum KeyboardButtonType) String() string {
	return valueKeyboardButtonType[enum]
}

func (enum KeyboardButtonType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *KeyboardButtonType) UnmarshalText(src []byte) error {
	value, ok := indexKeyboardButtonType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type MenuType int

const (
	_ MenuType = iota
)

var valueMenuType = map[MenuType]string{}

var indexMenuType = map[string]MenuType{}

func (enum MenuType) String() string {
	return valueMenuType[enum]
}

func (enum MenuType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *MenuType) UnmarshalText(src []byte) error {
	value, ok := indexMenuType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type PassportType int

const (
	_ PassportType = iota
	PassportTypeAddress
	PassportTypeBankStatement
	PassportTypeDriverLicense
	PassportTypeIDentityCard
	PassportTypeInternalPassport
	PassportTypePassport
	PassportTypePassportRegistration
	PassportTypePersonalDetails
	PassportTypeRentalAgreement
	PassportTypeTemporaryRegistration
	PassportTypeUtilityBill
)

var valuePassportType = map[PassportType]string{
	PassportTypeAddress:               "address",
	PassportTypeBankStatement:         "bank_statement",
	PassportTypeDriverLicense:         "driver_license",
	PassportTypeIDentityCard:          "identity_card",
	PassportTypeInternalPassport:      "internal_passport",
	PassportTypePassport:              "passport",
	PassportTypePassportRegistration:  "passport_registration",
	PassportTypePersonalDetails:       "personal_details",
	PassportTypeRentalAgreement:       "rental_agreement",
	PassportTypeTemporaryRegistration: "temporary_registration",
	PassportTypeUtilityBill:           "utility_bill",
}

var indexPassportType = map[string]PassportType{
	"address":                PassportTypeAddress,
	"bank_statement":         PassportTypeBankStatement,
	"driver_license":         PassportTypeDriverLicense,
	"identity_card":          PassportTypeIDentityCard,
	"internal_passport":      PassportTypeInternalPassport,
	"passport":               PassportTypePassport,
	"passport_registration":  PassportTypePassportRegistration,
	"personal_details":       PassportTypePersonalDetails,
	"rental_agreement":       PassportTypeRentalAgreement,
	"temporary_registration": PassportTypeTemporaryRegistration,
	"utility_bill":           PassportTypeUtilityBill,
}

func (enum PassportType) String() string {
	return valuePassportType[enum]
}

func (enum PassportType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *PassportType) UnmarshalText(src []byte) error {
	value, ok := indexPassportType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type PollType int

const (
	_ PollType = iota
	PollTypeQuiz
	PollTypeRegular
)

var valuePollType = map[PollType]string{
	PollTypeQuiz:    "quiz",
	PollTypeRegular: "regular",
}

var indexPollType = map[string]PollType{
	"quiz":    PollTypeQuiz,
	"regular": PollTypeRegular,
}

func (enum PollType) String() string {
	return valuePollType[enum]
}

func (enum PollType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *PollType) UnmarshalText(src []byte) error {
	value, ok := indexPollType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type SendType int

const (
	_ SendType = iota
	SendTypeQuiz
	SendTypeRegular
)

var valueSendType = map[SendType]string{
	SendTypeQuiz:    "quiz",
	SendTypeRegular: "regular",
}

var indexSendType = map[string]SendType{
	"quiz":    SendTypeQuiz,
	"regular": SendTypeRegular,
}

func (enum SendType) String() string {
	return valueSendType[enum]
}

func (enum SendType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *SendType) UnmarshalText(src []byte) error {
	value, ok := indexSendType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type StickerType int

const (
	_ StickerType = iota
	StickerTypeCustomEmoji
	StickerTypeMask
	StickerTypeRegular
)

var valueStickerType = map[StickerType]string{
	StickerTypeCustomEmoji: "custom_emoji",
	StickerTypeMask:        "mask",
	StickerTypeRegular:     "regular",
}

var indexStickerType = map[string]StickerType{
	"custom_emoji": StickerTypeCustomEmoji,
	"mask":         StickerTypeMask,
	"regular":      StickerTypeRegular,
}

func (enum StickerType) String() string {
	return valueStickerType[enum]
}

func (enum StickerType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *StickerType) UnmarshalText(src []byte) error {
	value, ok := indexStickerType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}

type StickersType int

const (
	_ StickersType = iota
	StickersTypeCustomEmoji
	StickersTypeMask
	StickersTypeRegular
)

var valueStickersType = map[StickersType]string{
	StickersTypeCustomEmoji: "custom_emoji",
	StickersTypeMask:        "mask",
	StickersTypeRegular:     "regular",
}

var indexStickersType = map[string]StickersType{
	"custom_emoji": StickersTypeCustomEmoji,
	"mask":         StickersTypeMask,
	"regular":      StickersTypeRegular,
}

func (enum StickersType) String() string {
	return valueStickersType[enum]
}

func (enum StickersType) MarshalText() ([]byte, error) {
	return []byte(enum.String()), nil
}

func (enum *StickersType) UnmarshalText(src []byte) error {
	value, ok := indexStickersType[string(src)]
	if !ok {
		return ErrIncorrectEnum{string(src)}
	}
	*enum = value
	return nil
}
